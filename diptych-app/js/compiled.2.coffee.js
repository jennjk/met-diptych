(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {
  var App, Collection, Item, Search, ref;

  require('./app/scripts/lib/module.coffee');

  ref = require('./app/scripts/lib/model.coffee'), Collection = ref.Collection, Item = ref.Item;

  App = angular.module('myApp', ['myApp.search', 'templates', 'ui.router', 'templates', 'angular-loading-bar', 'ngAnimate']);

  App.config(["$stateProvider", "$locationProvider", "$urlRouterProvider", function($stateProvider, $locationProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise('/');
    $locationProvider.html5Mode(true);
    return $stateProvider.state('home', {
      url: '/',
      templateUrl: 'pages/index.html'
    });
  }]);

  Search = angular.module('myApp.search');

  Search.controller('SearchCtrl', ["$scope", "$scrapi", function($scope, $scrapi) {
    var reset;
    reset = function() {
      $scope.status = 'Type a term to begin the search';
      $scope.pilot = null;
      return $scope.coPilot = null;
    };
    reset();
    $scope.next = function() {
      var ref1;
      return $scope.coPilot = (ref1 = $scrapi.collection.nextCoPilot()) != null ? ref1.image : void 0;
    };
    return $scope.submit = function() {
      reset();
      return $scrapi.fetch($scope.term).then(function(c) {
        var ref1, ref2;
        if (c.pilot == null) {
          return $scope.status = "No results found for " + $scope.term;
        } else {
          $scope.pilot = (ref1 = c.pilot) != null ? ref1.image : void 0;
          return $scope.coPilot = (ref2 = c.coPilot) != null ? ref2.image : void 0;
        }
      })["catch"](function(err) {
        reset();
        return $scope.status = err;
      });
    };
  }]);

  Search.service('$scrapi', ["$http", "$q", function($http, $q) {
    this.collection = new Collection;
    this.fetch = (function(_this) {
      return function(term) {
        var $deferred;
        $deferred = $q.defer();
        $http.get(window.location.protocol + "//scrapi.org/search/" + term).success(function(data) {
          var ref1;
          return $deferred.resolve((_this.collection = new Collection(((ref1 = data.collection) != null ? ref1.items : void 0) || [])));
        }).error(function() {
          return $deferred.reject('Error retrieving results');
        });
        return $deferred.promise;
      };
    })(this);
  }]);

  App.directive('fadeIn', ["$timeout", function($timeout) {
    return {
      restrict: 'A',
      link: function($scope, $element, attrs) {
        attrs.$observe('ngSrc', function(src) {
          $element.hide();
          return $element.removeClass('fade-in');
        });
        return $element.on('load', function() {
          $element.show();
          return $element.addClass('fade-in');
        });
      }
    };
  }]);

}).call(this);


},{"./app/scripts/lib/model.coffee":2,"./app/scripts/lib/module.coffee":3}],2:[function(require,module,exports){
var Collection, Item;

Collection = (function() {
  function Collection(items) {
    if (items == null) {
      items = [];
    }
    this.items = items.map(function(obj) {
      if ((obj.image_thumb != null) && !/NoImage/.test(obj.image_thumb)) {
        return new Item(obj);
      }
    }).filter(function(obj) {
      return obj != null;
    });
    this.pilot = this.items.splice(this.rand_index = Math.floor(Math.random() * this.items.length), 1)[0] || null;
    this.coPilot = this.items[(this.coIndex = 0)] || null;
    this.nextCoPilot = function() {
      this.coIndex++;
      return this.coPilot = this.items[this.coIndex % this.items.length] || null;
    };
  }

  return Collection;

})();

Item = (function() {
  function Item(item) {
    this.image_thumb = (item != null ? item.image_thumb : void 0) || null;
    this.image_large = this.image_thumb ? this.image_thumb.replace(/web-thumb/, "web-large") : null;
    this.image = this.image_large;
  }

  return Item;

})();

module.exports = {
  Item: Item,
  Collection: Collection
};



},{}],3:[function(require,module,exports){

/*
Workaround to make defining and retrieving angular modules easier and more intuitive.
 */
(function(angular) {
  var alreadyRegistered, origMethod;
  origMethod = angular.module;
  alreadyRegistered = {};

  /**
  Register/fetch a module.
  
  @param name {string} module name.
  @param reqs {array} list of modules this module depends upon.
  @param configFn {function} config function to run when module loads (only applied for the first call to create this module).
  @returns {*} the created/existing module.
   */
  angular.module = function(name, reqs, configFn) {
    var module;
    reqs = reqs || [];
    module = null;
    if (alreadyRegistered[name]) {
      module = origMethod(name);
      module.requires.push.apply(module.requires, reqs);
    } else {
      module = origMethod(name, reqs, configFn);
      alreadyRegistered[name] = module;
    }
    return module;
  };
})(angular);



},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,

//# sourceMappingURL=data:application/json;base64,